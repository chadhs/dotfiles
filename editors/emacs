;;;; package management

;;; keep track of start time for load time calculation
(defconst emacs-start-time  (current-time))

;;; allow package use
(require 'package)

;;; package repositories
(setq package-archives '(
                         ("gnu"           . "http://elpa.gnu.org/packages/")
                         ("melpa"         . "http://melpa.org/packages/")
                         ("melpa-stable"  . "http://stable.melpa.org/packages/")
                         ))

;;; specify which repo to install packages from
(setq package-pinned-packages '(
                                (cider    . "melpa-stable")
                                ))

;;; packages to install
(setq package-list '(
                     ;; emacs enhancements
                     exec-path-from-shell
                     diminish

                     ;; editing enhancements
                     ace-jump-mode
                     paredit
                     powerline
                     powerline-evil
                     rainbow-delimiters

                     ;; auto-completion
                     company

                     ;; syntax checking
                     flycheck
                     flycheck-pos-tip
                     flycheck-clojure

                     ;; themes
                     solarized-theme
                     ample-theme

                     ;; vim mode
                     evil
                     evil-leader
                     evil-matchit
                     evil-nerd-commenter
                     evil-paredit
                     evil-search-highlight-persist
                     evil-surround
                     evil-visualstar

                     ;; docs
                     dash-at-point

                     ;; projects / file / buffer mgmt
                     helm
                     helm-ag
                     helm-projectile
                     flx-ido
		     magit
                     projectile

                     ;; clojure
                     cider
                     clojure-mode
                     clojure-mode-extra-font-locking

                     ;; other syntaxes
                     markdown-mode
                     yaml-mode

                     ;; wishlist / testing
                     ))

;;; loads packages and activates them
(package-initialize)

;;; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))

;;; install / update packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

;;; show package load time
(let ((elapsed (float-time (time-subtract (current-time)
            emacs-start-time))))
  (message "Loaded packages in %.3fs" elapsed))



;;;; package settings

;;; evil mode settings
;; load evil-leader first so it's initialized from the start
(require 'evil-leader)
(setq evil-leader/in-all-states 1)
(global-evil-leader-mode)
(evil-leader/set-leader ",")

(require 'evil)
(evil-mode 1)

(require 'evil-matchit)
(global-evil-matchit-mode 1)

(evilnc-default-hotkeys)

(require 'evil-surround)
(global-evil-surround-mode 1)

(global-evil-visualstar-mode)

(require 'evil-search-highlight-persist)
(global-evil-search-highlight-persist t)

;;; project management
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
;; speed up matchinb by giving emacs garbage collection a more modern threshold
(setq gc-cons-threshold 20000000)

(require 'projectile)
(setq projectile-require-project-root nil)
(setq projectile-globally-ignored-directories
      (append '(
                ".git"
                ".svn"
                "env"
                "out"
                "repl"
                "target"
                "venv"
                )
              projectile-globally-ignored-directories))
(setq projectile-globally-ignored-files
      (append '(
                ".DS_Store"
                "*.gz"
                "*.pyc"
                "*.png"
                "*.jpg"
                "*.jar"
                "*.svg"
                "*.tar.gz"
                "*.tgz"
                "*.zip"
                )
              projectile-globally-ignored-files))
(projectile-global-mode)

;;; version control
(setq magit-push-current-set-remote-if-missing t)

;;; code auto-completion settings
;; company-mode
(add-hook 'after-init-hook 'global-company-mode)
(setq-default
 company-selection-wrap-around t ; let tab cycle through results
 company-dabbrev-code-modes t)   ; allow auto-completion to include _
(with-eval-after-load 'company
  (define-key company-active-map (kbd "<tab>") 'company-select-next)
  (define-key company-active-map (kbd "S-<return>") 'company-complete-selection)
  (define-key company-active-map (kbd "<return>") 'nil)
  (define-key company-active-map (kbd "RET") 'nil)
  )

;;; version control
(require 'git)
(require 'git-blame)

;;; syntax checking
(add-hook 'after-init-hook #'global-flycheck-mode)
;; floating tooltips only works in graphical mode
(when (display-graphic-p (selected-frame))
  (with-eval-after-load 'flycheck
    (setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages)
    (flycheck-pos-tip-mode)))
(setq flycheck-check-syntax-automatically '(mode-enabled save))

;;; paredit
(autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
(add-hook 'prog-mode-hook #'enable-paredit-mode)
(add-hook 'prog-mode-hook #'evil-paredit-mode)

;;; show-parens-mode
(show-paren-mode 1)
(setq show-paren-delay 0)

;;; rainbow delimiters
(require 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;;; emacs powerline
(require 'powerline)
(powerline-default-theme)
(require 'powerline-evil)
(powerline-evil-vim-color-theme)
(custom-set-faces
 '(powerline-evil-normal-face   ((t (:background "#859900" :foreground "#eee8d5"))))
 '(powerline-evil-insert-face   ((t (:background "#268bd2" :foreground "#eee8d5"))))
 '(powerline-evil-visual-face   ((t (:background "#cb4b16" :foreground "#eee8d5"))))
 '(powerline-evil-operator-face ((t (:background "#2aa198" :foreground "#eee8d5"))))
 '(powerline-evil-replace-face  ((t (:background "#dc322f" :foreground "#eee8d5"))))
 '(powerline-evil-motion-face   ((t (:background "#d33682" :foreground "#eee8d5"))))
 '(powerline-evil-emacs-face    ((t (:background "#6c71c4" :foreground "#eee8d5"))))
 )

;;; ace-jump - no leading word character needed for ace-jump-word-mode
(setq ace-jump-word-mode-use-query-char nil)

;;; clojure support
(require 'clojure-mode-extra-font-locking)
(add-hook 'cider-repl-mode-hook #'paredit-mode)
(setq cider-repl-pop-to-buffer-on-connect nil)
(eval-after-load 'flycheck '(flycheck-clojure-setup))

;;; yaml support
(require 'yaml-mode)

;;; slime support
;(load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;(setq inferior-lisp-program "/usr/local/bin/sbcl")



;;;; user functions

;;; yes and no prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;;; electric return functionality
(defvar electrify-return-match
  "[\]}\)\"]"
  "If this regexp matches the text after the cursor, do an \"electric\"
  return.")

(defun electrify-return-if-match (arg)
  "If the text after the cursor matches `electrify-return-match' then
   open and indent an empty line between the cursor and the text.  Move the
   cursor to the new line."
  (interactive "P")
  (let ((case-fold-search nil))
    (if (looking-at electrify-return-match)
      (save-excursion (newline-and-indent)))
    (newline arg)
    (indent-according-to-mode)))

;;; remove trailing whitespace and hard tabs from code
(defun remove-trailing-whitespace-and-hard-tabs ()
  (add-hook 'before-save-hook
      (lambda ()
        (delete-trailing-whitespace)
        (untabify (point-max) (point-max)))))

;;; make escape act like C-g in evil-mode
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))



;;;; user configuration

;;; path fix for os x gui mode
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

;;; os x keybinding fix
;; For iTerm: Go to Preferences > Profiles > (your profile) > Keys > Left option key acts as: > choose +Esc

;;; theme
(if (display-graphic-p)
    (load-theme 'solarized-dark t) ; graphical theme
    (load-theme 'ample t) ; terminal theme
    ;; (load-theme 'solarized-light t) ; terminal theme
    ;; (load-theme 'solarized-dark t) ; terminal theme
  )

;;; font settings
(set-face-attribute 'default nil
        :family "Menlo" :height 140 :weight 'normal)

;;; ui tweaks
(if (display-graphic-p)
  (progn
    (scroll-bar-mode -1)
    (tool-bar-mode -1)))
(menu-bar-mode -1)

;;; smoother scrolling
(setq scroll-margin 8
      scroll-conservatively 9999
      scroll-step 1)

;;; initial widow size and position (`left . -1` is the closest i can get to right align)
(setq initial-frame-alist '((top . 0) (left . -1) (width . 120) (height . 80)))

;;; fix terminal colors
(custom-set-faces (if (not window-system) '(default ((t (:background "nil"))))))

;;; tab settings
(setq indent-tabs-mode nil)

;;; remove trailing whitespace and hard tabs from specific file types
(mapc (lambda (language-mode-hook) (add-hook language-mode-hook 'remove-trailing-whitespace-and-hard-tabs))
      '(
        lisp-mode-hook
        clojure-mode-hook
        css-mode-hook
        html-mode-hook
        javascript-mode-hook
        python-mode-hook
        ruby-mode-hook
        sql-mode-hook
        yaml-mode-hook
        ))

;;; remember cursor position in buffers
(require 'saveplace)
(setq-default save-place t)

;;; store auto-save and backup files in ~/tmp/
(defvar my-auto-save-dir "~/tmp/")
(setq backup-directory-alist
      `((".*" . ,my-auto-save-dir)))
(setq auto-save-file-name-transforms
      `((".*" ,my-auto-save-dir t)))

;;; set file types
(add-to-list 'auto-mode-alist '(".emacs" . lisp-mode))
(add-to-list 'auto-mode-alist '("\\.yml" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.sls" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.md" . markdown-mode))

;;; set initial evil state for particular modes
(loop for (mode . state) in '(
                              (dired-mode . normal)
                              (magit-mode . normal)
                              (magit-status-mode . emacs)
                              (magit-diff-mode . normal)
                              (magit-log-mode . normal)
                              (magit-process-mode . normal)
                              (magit-popup-mode . emacs)
                              )
      do (evil-set-initial-state mode state))

;;; declutter modeline
(require 'diminish)
(eval-after-load "paredit"    '(diminish 'paredit-mode))
(eval-after-load "company"    '(diminish 'company-mode))
(eval-after-load "flycheck"   '(diminish 'flycheck-mode))
(eval-after-load "undo-tree"  '(diminish 'undo-tree-mode))

;;; modeline tweaks
(setq projectile-mode-line '(:eval (format " [%s] " (projectile-project-name))))



;;;; keyboard shortcuts

;;; electric return
(global-set-key (kbd "RET") 'electrify-return-if-match)

;;; evil - global
(evil-leader/set-key "/" 'evil-search-highlight-persist-remove-all)

;;; projects / files / buffers
(evil-leader/set-key "t" 'helm-projectile-find-file-dwim) ; emulate command-(t)
(evil-leader/set-key "b" 'helm-buffers-list) ; switch to (b)uffer
(evil-leader/set-key "kb" 'kill-buffer) ; (k)ill (b)uffer
(evil-leader/set-key "fi" 'helm-projectile-ag) ; (f)ind (i)n files

;;; commenting
(evil-leader/set-key "cl" 'evilnc-comment-or-uncomment-lines)
(evil-leader/set-key "cp" 'evilnc-comment-or-uncomment-paragraphs)

;;; evil line movement tweaks
(define-key evil-motion-state-map "j" 'evil-next-visual-line)
(define-key evil-motion-state-map "k" 'evil-previous-visual-line)
(define-key evil-visual-state-map "j" 'evil-next-visual-line)
(define-key evil-visual-state-map "k" 'evil-previous-visual-line)

;;; evil emacs conflicts
(define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)

;;; evil vim inconsistencies
(define-key evil-visual-state-map (kbd "x") 'evil-delete)

;;; move to next / prev pane
(define-key evil-motion-state-map (kbd "C-j") 'evil-window-next)
(define-key evil-motion-state-map (kbd "C-k") 'evil-window-prev)

;;; close pane
;; evil-mode built in with `C-w c`

;;; close all other panes
(define-key evil-motion-state-map (kbd "C-z") 'delete-other-windows)

;;; jump to line / word
(evil-leader/set-key "jl" 'evil-ace-jump-line-mode)
(evil-leader/set-key "jw" 'evil-ace-jump-word-mode)
(evil-leader/set-key "jc" 'evil-ace-jump-char-mode)

;;; use escape for C-g in evil-mode
(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
(global-set-key [escape] 'evil-exit-emacs-state)

;;; clojure - cider
(evil-leader/set-key "ri" 'cider-jack-in)               ; (r)epl (i)nitialize
(evil-leader/set-key "rc" 'cider-connect)               ; (r)epl (c)onnect
(evil-leader/set-key "eb" 'cider-eval-buffer)           ; (e)val (b)uffer
(evil-leader/set-key "ef" 'cider-eval-defun-at-point)   ; (e)val (f)orm
(evil-leader/set-key "rt" 'cider-test-run-tests)        ; (r)un (t)ests
(evil-leader/set-key "rb" 'cider-switch-to-repl-buffer) ; (r)epl (b)uffer
(evil-leader/set-key "ff" 'cider-format-defun)          ; (f)ormat de(f)un
(evil-leader/set-key "fr" 'cider-format-region)         ; (f)ormat (r)egion
(evil-leader/set-key "fb" 'cider-format-buffer)         ; (f)ormat (b)uffer

;; flycheck
(evil-leader/set-key "cb" 'flycheck-buffer) ; (c)heck (b)uffer

;;; paredit
(evil-leader/set-key "W" 'paredit-wrap-sexp)
(evil-leader/set-key "w(" 'paredit-wrap-sexp)
(evil-leader/set-key "w[" 'paredit-wrap-square)
(evil-leader/set-key "w{" 'paredit-wrap-curly)
;; barf == push out of current sexp
;; slurp == pull into current sexp
(evil-leader/set-key ">>" 'paredit-forward-barf-sexp)
(evil-leader/set-key "><" 'paredit-forward-slurp-sexp)
(evil-leader/set-key "<<" 'paredit-backward-barf-sexp)
(evil-leader/set-key "<>" 'paredit-backward-slurp-sexp)
;; del surrounding parens / brackets / braces
(evil-leader/set-key "D" 'paredit-splice-sexp)

;;; doc search
(evil-leader/set-key "d" 'dash-at-point)

;;; bookmarks
(evil-leader/set-key "ms" 'bookmark-set)
(evil-leader/set-key "mj" 'bookmark-jump)
(evil-leader/set-key "ml" 'helm-bookmarks)

;;; magit
;; you can also use built-in hotkeys from status mode:
;; ? - show commands
;; s - stage S - stage all
;; c - commit (then c again to move to commit message and change review)
;; P - push (then u to push to origin/master)
(evil-leader/set-key "gg" 'magit-dispatch-popup)
(evil-leader/set-key "gs" 'magit-status)
(evil-leader/set-key "gco" 'magit-checkout)
(evil-leader/set-key "gcb" 'magit-branch-and-checkout)
(evil-leader/set-key "gl" 'magit-pull-from-upstream)
(evil-leader/set-key "ga" 'magit-stage-modified)
(evil-leader/set-key "gu" 'magit-unstage)
(evil-leader/set-key "gca" 'magit-commit)
(evil-leader/set-key "cc" 'with-editor-finish)
(evil-leader/set-key "cC" 'with-editor-cancel)
(evil-leader/set-key "gp" 'magit-push-current-to-upstream)

;;; line number toggle
(evil-leader/set-key "nn" 'linum-mode)

;;; full screen toggle
(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen) ; s = super (⌘ on mac)

;;; (e)dit (e)macs user init file
(evil-leader/set-key "ee" (lambda () (interactive) (find-file user-init-file)))

;;; (s)ource (e)macs user init file
(evil-leader/set-key "se" (lambda () (interactive) (load-file user-init-file)))

;;; set emacs command hotkey (M-x) to (helm-M-x)
(global-set-key (kbd "M-x") 'helm-M-x)



;;;; report total load time
(let ((elapsed (float-time (time-subtract (current-time)
            emacs-start-time))))
  (message "Loaded emacs in %.3fs" elapsed))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Values Set via Customize ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  )
