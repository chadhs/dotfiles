* Emacs Configuration

This file bootstraps a complete Emacs environment to my liking. \\
If you're new to Emacs check out spacemacs: http://spacemacs.org.

If you need some help, send me some electronic mail. \\
Chad Stovern: [[mailto:hello@chadstovern.com][hello@chadstovern.com]]


** Table of contents
:TOC:
   - [[#package-management][Package management]]
   - [[#package-specific-configuration][Package specific configuration]]
   - [[#user-functions][User functions]]
   - [[#user-configuration][User configuration]]
   - [[#key-bindings][Key bindings]]


** Package management

I use =use-package= for installing and managing package loading.  This section contains configuration to bootstrap =use-package=.

*** Track emacs load time

I like to keep track of how long it takes emacs to load, so this will establish a starting timestamp.

#+BEGIN_SRC emacs-lisp
  (defconst emacs-start-time (current-time))
#+END_SRC

*** Emacs garbage collection threshold settings

Let's Speed up operations by giving emacs garbage collection a more modern threshold.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000) ; ~20MB
#+END_SRC

*** Load package support

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
#+END_SRC

*** Define package repositories

#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("gnu"          . "https://elpa.gnu.org/packages/")
          ("melpa"        . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))
#+END_SRC

*** Pin packages

The lastest packages are nice, but sometimes you want to stick with stable releases.  Package will always install the lastest packages available unless a package is pinned to a repository.

#+BEGIN_SRC emacs-lisp
  (setq package-pinned-packages
        '(
          ;; (cider            . "melpa-stable")
          ;; (clj-refactor     . "melpa-stable")
          ;; (flycheck-clojure . "melpa-stable")
          ;; (use-package      . "melpa-stable")
          ))
#+END_SRC

*** Initialize package

#+BEGIN_SRC emacs-lisp
  (package-initialize)
#+END_SRC

*** Bootstrap use-package

use-package is great for lazy-loading packages efficiently.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq use-package-always-ensure t)

  (use-package diminish) ; no longer included with use-package by default

  ;;; example use-package usage
  ;; (use-package foo
  ;;   :ensure t
  ;;   :defer t
  ;;   :if (display-graphic-p)
  ;;   :commands (foo-all foo-super)
  ;;   :mode "\\.mode\\'"
  ;;   :diminish "f"
  ;;   :init
  ;;   (setq foo-variable t)
  ;;   (evil-leader/set-key "fs" #'foo-super)
  ;;   :config
  ;;   (foo-mode 1))
#+END_SRC

*** Show package load time

Here's where we report how long it took to load all installed packages to the Messages buffer.

#+BEGIN_SRC emacs-lisp
  ;;; show package load time
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loaded packages in %.3fs" elapsed))
#+END_SRC


** Package specific configuration

This section documents all loaded packages and their configuration.

*** emacs enhancements

#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs
    :defer t)
#+END_SRC

*** evil-mode settings

Emacs is great and has many amazing features, modal editing is not one of them.  I like to edit text at the speed of thought, so evil-mode gives me a complete Vim implementation within Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    :config
    ;; load evil-leader first so it's initialized for evil-mode
    (global-evil-leader-mode)
    (evil-leader/set-leader ","))

  (use-package evil
    :config
    (evil-mode 1)
    ;; set initial evil state for particular modes
    (cl-loop for (mode . state) in '((cider-test-report-mode . emacs)
                                     (dired-mode             . normal)
                                     (magit-mode             . normal)
                                     (magit-status-mode      . emacs)
                                     (magit-diff-mode        . normal)
                                     (magit-log-mode         . normal)
                                     (magit-process-mode     . normal)
                                     (magit-popup-mode       . emacs)
                                     ;; this allows vi-mode in shells
                                     (term-mode              . emacs))
             do (evil-set-initial-state mode state)))

  (use-package evil-matchit
    :config
    (global-evil-matchit-mode 1))

  (use-package evil-nerd-commenter
    :defer t
    :config
    (evilnc-default-hotkeys))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  (use-package evil-visualstar
    :config
    (global-evil-visualstar-mode))

  (use-package evil-search-highlight-persist
    :config
    (global-evil-search-highlight-persist t))
#+END_SRC

*** themes

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :if (display-graphic-p)
    :config
    (load-theme 'solarized-dark t)
    (load-theme 'solarized-light t))

  (use-package ample-theme
    :if (not (display-graphic-p))
    :config
    (load-theme 'ample t))
#+END_SRC

*** cycle themes

#+BEGIN_SRC emacs-lisp
  (use-package cycle-themes
    :if (display-graphic-p)
    :init
    (setq cycle-themes-theme-list
          '(solarized-dark
            solarized-light))
    :config
    (evil-leader/set-key "ct" #'cycle-themes))
#+END_SRC

*** terminal settings

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :defer t
    :init
    (setq multi-term-dedicated-window-height 30
          multi-term-program "/usr/local/bin/zsh")
    (add-hook 'term-mode-hook
              (lambda ()
                (setq term-buffer-maximum-size 10000)
                (setq yas-dont-activate t)
                (setq-local scroll-margin 0)
                (setq-local scroll-conservatively 0)
                (setq-local scroll-step 1)
                (setq-local evil-emacs-state-cursor 'bar)
                (setq-local global-hl-line-mode nil))))
#+END_SRC

*** window management

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package zoom-window
    :defer t
    :init
    (setq zoom-window-mode-line-color nil))

  ;; prevent reloading persp-mode when reloading emacs config
  (use-package perspective
    :if (not (bound-and-true-p persp-mode))
    :config
    (persp-mode))

  (use-package buffer-move
    :defer t)
#+END_SRC

*** navigation

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :init
    (setq ivy-use-virtual-buffers t
          ivy-height 15
          ivy-count-format "(%d/%d) "
          ivy-re-builders-alist '((t . ivy--regex-ignore-order)))
    :config
    (ivy-mode 1))

  (use-package counsel
    :defer t)

  (use-package counsel-projectile
    :defer t)

  (use-package smex
    :defer t)

  (use-package neotree
    :defer t
    :init
    (setq neo-smart-open t
          neo-autorefresh t
          neo-force-change-root t))
#+END_SRC

*** project management

Explain.

#+BEGIN_SRC emacs-lisp
  ;;; project management
  (use-package projectile
    :defer t
    :diminish projectile-mode
    :init
    (setq projectile-require-project-root nil)
    :config
    (setq projectile-globally-ignored-directories
          (cl-union projectile-globally-ignored-directories
                    '(".git"
                      ".cljs_rhino_repl"
                      ".meghanada"
                      ".svn"
                      "out"
                      "node_modules"
                      "repl"
                      "resources/public/js/compiled"
                      "target"
                      "venv")))
    (setq projectile-globally-ignored-files
          (cl-union projectile-globally-ignored-files
                    '(".DS_Store"
                      ".lein-repl-history"
                      "*.gz"
                      "*.pyc"
                      "*.png"
                      "*.jpg"
                      "*.jar"
                      "*.retry"
                      "*.svg"
                      "*.tar.gz"
                      "*.tgz"
                      "*.zip")))
    (setq projectile-globally-unignored-files
          (cl-union projectile-globally-unignored-files
                    '("profiles.clj")))
    (setq projectile-mode-line '(:eval (format " [%s] " (projectile-project-name))))
    (projectile-mode))
#+END_SRC

*** documentation

#+BEGIN_SRC emacs-lisp
  ;; (use-package deft
  ;;   :defer t
  ;;   :init
  ;;   (defvar --user-home-dir (concat (getenv "HOME") "/"))
  ;;   (defvar --user-notes-dir (concat --user-home-dir ".deft/"))
  ;;   (unless (file-exists-p --user-notes-dir)
  ;;     (make-directory --user-notes-dir t)))
#+END_SRC

*** version control

magit so awesome.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :defer t
    :init
    ;; ? will pop up the built-in hotkeys from status mode
    (evil-leader/set-key
      "gg"  #'magit-dispatch-popup
      "gst" #'magit-status
      "gd"  #'magit-diff-working-tree
      "gco" #'magit-checkout
      "gcm" #'magit-checkout
      "gcb" #'magit-branch-and-checkout
      "gl"  #'magit-pull-from-upstream
      "gaa" #'magit-stage-modified
      "grh" #'magit-reset-head
      "gca" #'magit-commit
      "gpu" #'magit-push-current-to-upstream
      "gpp" #'magit-push-current-to-pushremote
      "gt"  #'magit-tag
      "gpt" #'magit-push-tags)
    ;; specific within magit-mode
    (evil-leader/set-key-for-mode 'text-mode
      "cc" 'with-editor-finish
      "cC" 'with-editor-cancel)
    :config
    (setq truncate-lines nil) ; wrap lines, don't truncate.
    ;; let's improve evil-mode compatability
    (define-key magit-status-mode-map (kbd "k") #'previous-line)
    (define-key magit-status-mode-map (kbd "K") 'magit-discard)
    (define-key magit-status-mode-map (kbd "j") #'next-line))
#+END_SRC

diff-hl pretty cool.

#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :defer t
    :init
    (add-hook 'after-init-hook 'global-diff-hl-mode)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    :config
    (diff-hl-flydiff-mode t)
    (unless (display-graphic-p)
      (diff-hl-margin-mode t)))
#+END_SRC

*** code auto-completion settings

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish "⇥"
    :config
    (ac-config-default)
    (setq ac-disable-faces nil)
    (define-key ac-completing-map "\t" 'ac-complete) ; set tab key for completion
    (define-key ac-completing-map "\r" nil)          ; disable return
    (setq ac-modes
          (cl-union ac-modes
                    '(cider-mode
                      cider-repl-mode
                      conf-space-mode
                      html-mode
                      markdown-mode
                      org-mode
                      salt-mode
                      sql-mode
                      yaml-mode))))
#+END_SRC

*** syntax checking

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :defer t
    :diminish "✓"
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode)
    :config
    ;; disable documentation related emacs lisp checker
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc clojure-cider-typed)))
#+END_SRC

*** paredit

Explain.

barf == push out of current sexp \\
slurp == pull into current sexp \\
use ~Y~ not ~yy~ for yanking a line maintaining balanced parens \\
use ~y%~ for yanking a s-expression

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :defer t
    :diminish "⒫"
    :init
    (add-hook 'prog-mode-hook 'enable-paredit-mode)
    (add-hook 'org-mode-hook 'enable-paredit-mode)
    (add-hook 'yaml-mode-hook (lambda ()
                                (enable-paredit-mode)
                                (electric-pair-mode)))
    (evil-leader/set-key
      "W"   #'paredit-wrap-sexp
      "w("  #'paredit-wrap-sexp
      "w["  #'paredit-wrap-square
      "w{"  #'paredit-wrap-curly
      "w<"  #'paredit-wrap-angled
      "w\"" #'paredit-meta-doublequote
      ">>"  #'paredit-forward-barf-sexp
      "><"  #'paredit-forward-slurp-sexp
      "<<"  #'paredit-backward-barf-sexp
      "<>"  #'paredit-backward-slurp-sexp
      "D"   #'paredit-splice-sexp         ; del surrounding ()[]{}
      "rs"  #'raise-sexp                  ; (r)aise (s)exp
      "ss"  #'paredit-split-sexp          ; (s)plit (s)exp
      "js"  #'paredit-join-sexps          ; (j)oin (s)exps
      "xs"  #'kill-sexp                   ; (x)delete (s)exp
      "xS"  #'backward-kill-sexp          ; (x)delete (S)exp backward
      "pt"  #'evil-cleverparens-mode)     ; clever(p)arens (t)oggle
    :config
    ;; prevent paredit from adding a space before opening paren in certain modes
    (defun cs-mode-space-delimiter-p (endp delimiter)
      "Don't insert a space before delimiters in certain modes"
      (or
       (bound-and-true-p js2-mode)
       (bound-and-true-p js-mode)
       (bound-and-true-p javascript-mode)))
    (add-to-list 'paredit-space-for-delimiter-predicates #'cs-mode-space-delimiter-p))

  (use-package evil-cleverparens
    :defer t
    :diminish "⒞"
    :init
    (add-hook 'prog-mode-hook 'evil-cleverparens-mode)
    (add-hook 'org-mode-hook 'evil-cleverparens-mode)
    (add-hook 'yaml-mode-hook 'evil-cleverparens-mode)
    (evil-leader/set-key "pt" #'evil-cleverparens-mode) ; clever(p)arens (t)oggle
    :config
    ;; prevent evil-cleverparens from setting x and X to delete and splice,
    ;; preventing it from "breaking" paredit's default strict behavior.
    (evil-define-key 'normal evil-cleverparens-mode-map
      (kbd "x") #'paredit-forward-delete
      (kbd "X") #'paredit-backward-delete))
#+END_SRC

*** aggressive indentation

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :diminish "⇉"
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+END_SRC

*** rainbow delimiters

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :defer t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'yaml-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** column width enforcement

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package column-enforce-mode
    :defer t
    :diminish column-enforce-mode
    :init
    (setq column-enforce-column 100
          column-enforce-comments nil)
    (add-hook 'prog-mode-hook #'column-enforce-mode))
#+END_SRC

*** show end of buffer in editing modes (easily see empty lines)

#+BEGIN_SRC emacs-lisp
  (use-package vi-tilde-fringe
    :defer t
    :diminish vi-tilde-fringe-mode
    :init
    (add-hook 'prog-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'conf-space-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'markdown-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'org-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'yaml-mode-hook #'vi-tilde-fringe-mode))
#+END_SRC

*** emoji / unicode support 😎👍🏼🚀

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :defer t
    :init
    (add-hook 'after-init-hook #'global-emojify-mode)
    :config
    (setq emojify-inhibit-major-modes
          (cl-union emojify-inhibit-major-modes
                    '(cider-mode
                      cider-repl-mode
                      cider-test-report-mode
                      sql-mode
                      term-mode
                      web-mode
                      yaml-mode))
          emojify-prog-contexts "comments"))
#+END_SRC

*** keybind discovery

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

*** ace-jump

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :defer t
    :init
    ;; no leading word character needed
    (setq ace-jump-word-mode-use-query-char nil))
#+END_SRC

*** editorconfig: indentation and whitespace settings

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :diminish "↹"
    :init
    (add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . editorconfig-conf-mode))
    :config
    (editorconfig-mode 1))
#+END_SRC

*** documentation search

#+BEGIN_SRC emacs-lisp
  (use-package dash-at-point
    :defer t)
#+END_SRC

*** code snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :defer t
    :diminish yas-minor-mode)
#+END_SRC

*** clojure support

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :defer t
    :init
    (add-hook 'clojure-mode-hook (lambda ()
                                   (clj-refactor-mode 1)
                                   (yas-minor-mode)
                                   (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
    ;; :config
    ;; this custom repl setup is for re-frame/reagent clojurescript development
    ;; (setq cider-cljs-lein-repl
    ;;       "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
    )
  ;; add keybindings here to replace cljr-helm (,rf)
  (use-package clojure-mode-extra-font-locking
    :defer t)
  (use-package cider
    :defer t
    :init
    (setq cider-repl-pop-to-buffer-on-connect nil ; don't show repl buffer on launch
          cider-repl-display-in-current-window t  ; open repl buffer in current window
          cider-show-error-buffer nil             ; don't show error buffer automatically
          cider-auto-select-error-buffer nil      ; don't switch to error buffer on error
          cider-font-lock-dynamically t           ; font-lock as much as possible
          cider-save-file-on-load t               ; save file on prompt when evaling
          cider-repl-use-clojure-font-lock t      ; nicer repl output
          cider-repl-history-file (concat user-emacs-directory "cider-history")
          cider-repl-wrap-history t
          cider-repl-history-size 3000
          nrepl-hide-special-buffers t)
    (add-hook 'cider-mode-hook (lambda ()
                                 (ac-flyspell-workaround)
                                 (ac-cider-setup)
                                 (eldoc-mode)))
    (add-hook 'cider-repl-mode-hook (lambda ()
                                      (paredit-mode)
                                      (ac-cider-setup)))
    :config
    (setq cider-mode-line '(:eval (format " [%s]" (cider--modeline-info))))
    (eval-after-load 'flycheck '(flycheck-clojure-setup)))
  (use-package ac-cider
    :defer t)
  (use-package clj-refactor
    :defer t
    :diminish "↻")
  (use-package flycheck-clojure
    :defer t)
#+END_SRC

*** web templates

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :mode ("\\.html\\'"
           "\\.html\\.erb\\'"
           "\\.php\\'"
           "\\.jinja\\'"
           "\\.j2\\'")
    :init
    ;; fix paren matching web-mode conflict for jinja-like templates
    (add-hook
     'web-mode-hook
     (lambda ()
       (setq-local electric-pair-inhibit-predicate
                   (lambda (c)
                     (if (char-equal c ?{) t (electric-pair-default-inhibit c))))))
    :config
    (setq web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-markup-indent-offset 2))
#+END_SRC

*** stylesheets

#+BEGIN_SRC emacs-lisp
  (use-package css-mode
    :ensure nil
    :mode "\\.css\\'"
    :config
    (setq css-indent-offset 2)
    (electric-pair-mode 1))

  (use-package scss-mode
    :ensure nil
    :mode ("\\.scss\\'"
           "\\.sass\\'")
    :config
    (setq css-indent-offset 2)
    (electric-pair-mode 1))

  (use-package rainbow-mode
    :defer t
    :diminish rainbow-mode
    :init
    (add-hook 'css-mode-hook 'rainbow-mode)
    (add-hook 'scss-mode-hook 'rainbow-mode))
#+END_SRC

*** yaml support

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :mode "\\.yml\\'")
#+END_SRC

*** shell script support

shell-script-mode is a built-in mode, but i'm using the use-package stanza for consistency.

#+BEGIN_SRC emacs-lisp
  (use-package shell-script-mode
    :ensure nil
    :defer t
    :mode "\\.sh\\'"
    :init
    (setq sh-basic-offset 2
          sh-indentation  2)
    (electric-pair-mode 1))
#+END_SRC

*** ruby support

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package inf-ruby
    :defer t
    :init
    (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))
  (use-package robe
    :defer t
    :init
    (add-hook 'ruby-mode-hook 'robe-mode)
    (add-hook 'robe-mode-hook 'ac-robe-setup))
#+END_SRC

*** python support

Explain.

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :defer t
    :init
    (add-hook 'python-mode-hook 'elpy-enable))
#+END_SRC

*** javascript support

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :mode "\\.js\\'"
    :config
    (setq js2-mode-show-parse-errors nil
          js2-mode-show-strict-warnings nil
          js2-basic-offset 2)
    (electric-pair-mode 1))
#+END_SRC

*** java support

#+BEGIN_SRC emacs-lisp
  (use-package meghanada
    :defer t
    :init
    (add-hook 'java-mode-hook
              (lambda ()
                (meghanada-mode t)
                (setq c-basic-offset 2)
                (add-hook 'before-save-hook 'meghanada-code-beautify-before-save))))
#+END_SRC

*** other syntaxes

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :mode "Dockerfile\\'")
  (use-package lua-mode
    :defer t)
  (use-package markdown-mode
    :mode ("\\.md\\'"
           "\\.txt\\'"
           "\\.taskpaper\\'"))
  (use-package json-mode
    :defer t)
  (use-package salt-mode
    :defer t
    :diminish mmm-mode)
  (use-package terraform-mode
    :defer t)
#+END_SRC

*** org-mode

Explain.

#+BEGIN_SRC emacs-lisp
  ;;; org-mode - (part of core; no use-package stanza)
  (setq org-insert-mode-line-in-empty-file t) ; for .txt file compatability

  ;; gtd settings
  ;; (setq org-todo-keywords
  ;;       '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "DONE" "CANCELLED")))
  ;; (setq org-agenda-files '("~/Dropbox/org/"))
  ;; (setq org-agenda-text-search-extra-files '(agenda-archives))
  ;; (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
  ;; (setq org-enforce-todo-dependencies t)
  ;; (setq org-log-done (quote time))
  ;; (setq org-log-redeadline (quote time))
  ;; (setq org-log-reschedule (quote time))

  ;; display
  (use-package org-bullets
    :defer t
    :init
    (add-hook 'org-mode-hook
              (lambda ()
                (org-bullets-mode t))))

  (setq org-ellipsis "⤵")
  (setq org-startup-truncated nil) ; wrap lines, don't truncate.
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  ;; exporting
  (add-hook 'org-mode-hook
            (lambda ()
              (require 'ox-md)
              (require 'ox-beamer)))
  (setq org-export-with-smart-quotes t)
  (setq org-html-postamble nil)
#+END_SRC


** User functions

This section documents any custom functions and their purpose.

*** command aliases

Explain: yes and no prompts

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** evil escape

Explain: Make escape act like C-g in evil-mode

#+BEGIN_SRC emacs-lisp
  (defun cs-minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
#+END_SRC

*** electric return

Explain: Electric return functionality

#+BEGIN_SRC emacs-lisp
  (defvar cs-electrify-return-match
    "[\]}\)]"
    "If this regexp matches the text after the cursor, do an \"electric\" return.")

  (defun cs-electrify-return-if-match (arg)
    "When text after cursor and ARG match, open and indent an empty line.
  Do this between the cursor and the text.  Then move the cursor to the new line."
    (interactive "P")
    (let ((case-fold-search nil))
      (if (looking-at cs-electrify-return-match)
          (save-excursion (newline-and-indent)))
      (newline arg)
      (indent-according-to-mode)))
#+END_SRC

*** open dired at current location

#+BEGIN_SRC emacs-lisp
  (defun cs-open-dired-at-current-dir ()
    (interactive)
    (let (current-dir (file-name-directory (buffer-file-name (current-buffer))))
      (dired current-dir)))
#+END_SRC

*** preview file with marked

#+BEGIN_SRC emacs-lisp
  (defun cs-marked-preview-file ()
    "use Marked 2 to preview the current file"
    (interactive)
    (shell-command
     (format "open -a 'Marked 2.app' %s"
             (shell-quote-argument (buffer-file-name)))))
#+END_SRC


** User configuration

This section is where all general emacs configuration lives.

*** path fix for macOS gui mode

#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
    (setenv "PATH" (shell-command-to-string "source ~/.profile && printf $PATH"))
    (setq exec-path (cl-union (split-string (shell-command-to-string "source ~/.profile && printf $PATH") ":") exec-path)))
#+END_SRC

*** macOS keybinding fix

For iTerm: Go to Preferences > Profiles > (your profile) > Keys > Left option key acts as: > choose +Esc

*** startup behavior

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** don't save customizations to init file

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory ".emacs-customize.el"))
#+END_SRC

*** set default starting directory (avoid launching projectile at HOME or src root)

#+BEGIN_SRC emacs-lisp
  (defvar --user-home-dir (concat (getenv "HOME") "/"))
  (defvar --user-src-dir (concat --user-home-dir "src/"))
  (defvar --user-scratch-dir (concat --user-src-dir "scratch/"))
  (unless (file-exists-p --user-scratch-dir)
    (make-directory --user-scratch-dir t))
  (when (or (string= default-directory "~/")
            (string= default-directory --user-home-dir)
            (string= default-directory --user-src-dir))
    (setq default-directory --user-scratch-dir))
#+END_SRC

*** default to utf8

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
#+END_SRC

*** pretty symbols

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode)
#+END_SRC

*** always end with a newline

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

*** word wrapping

#+BEGIN_SRC emacs-lisp
  (setq-default word-wrap t)
  (visual-line-mode 1)
#+END_SRC

*** move through camelCaseWords
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

*** highlight matching parens

#+BEGIN_SRC emacs-lisp
  (setq show-paren-style 'parenthesis
        show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

*** font settings

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "Menlo" :height 140 :weight 'normal)
#+END_SRC

*** turn off menu-bar, tool-bar, and scroll-bar

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
#+END_SRC

*** hi-light current line

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode)
#+END_SRC

*** smoother scrolling

#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 8
        scroll-conservatively 100
        scroll-step 1)
#+END_SRC

*** slower smoother trackpad scrolling

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC

*** fix ls warning when dired launches on macOS

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (require 'ls-lisp)
    (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

*** initial widow size and position (`left . -1` is to get close to right align)

#+BEGIN_SRC emacs-lisp
  (setq initial-frame-alist '((top . 0) (left . -1) (width . 120) (height . 80)))
#+END_SRC

*** prevent verticle split automatically on larger displays

#+BEGIN_SRC emacs-lisp
  (setq split-height-threshold 160)
#+END_SRC

*** tab settings

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

*** remember cursor position in buffers

#+BEGIN_SRC emacs-lisp
  (if (version< emacs-version "25.1")
      (lambda ()
        (require 'saveplace)
        (setq-default save-place t))
    (save-place-mode 1))
#+END_SRC

*** store auto-save and backup files in ~/.emacs.d/backups/

#+BEGIN_SRC emacs-lisp
  (defvar --backup-dir (concat user-emacs-directory "backups"))
  (unless (file-exists-p --backup-dir)
    (make-directory --backup-dir t))
  (setq backup-directory-alist `((".*" . ,--backup-dir)))
  (setq auto-save-file-name-transforms `((".*" ,--backup-dir t)))
  (setq backup-by-copying t
        delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t
        auto-save-default t)
#+END_SRC

*** version control

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

*** declutter the modeline

For built in packages, installed packages use the :diminish keyword via use-package.

#+BEGIN_SRC emacs-lisp
  (diminish 'auto-revert-mode "↺")
  (diminish 'subword-mode)
  (diminish 'undo-tree-mode)
#+END_SRC

*** custom mode-line configuration

Packages like spaceline are great, but can add a lot of overhead, and also limit you.
I've set up my own custom modeline that provides a format that looks like this:

N [*]filename [project] ᚠbranch (modes) Err U: line:col [main] 29%

#+BEGIN_SRC emacs-lisp
  (setq x-underline-at-descent-line t) ; better modeline underline alignment
  (setq-default
   mode-line-format
   (list
    '(:eval
      (propertize
       evil-mode-line-tag
       ;; let's give our evil/vim state a nice visual cue by adding some color
       'face (cond
              ((string= evil-mode-line-tag " <E> ") '(:background "#6c71c4" :foreground "#eee8d5"))
              ((string= evil-mode-line-tag " <N> ") '(:background "#859900" :foreground "#eee8d5"))
              ((string= evil-mode-line-tag " <I> ") '(:background "#268bd2" :foreground "#eee8d5"))
              ((string= evil-mode-line-tag " <V> ") '(:background "#cb4b16" :foreground "#eee8d5"))
              ((string= evil-mode-line-tag " <R> ") '(:background "#dc322f" :foreground "#eee8d5"))
              ;; ((string= evil-mode-line-tag " <O> ") '(:background "#d33682" :foreground "#eee8d5"))
              )))
    "[%*]" mode-line-buffer-identification
    '(projectile-mode-line projectile-mode-line)
    '(vc-mode (:eval (concat "ᚠ" (second (split-string vc-mode ":"))))) " "
    mode-line-modes
    '(flycheck-mode-line flycheck-mode-line) " "
    "%Z "
    "%l:%c "
    '(persp-modestring persp-modestring) " "
    "%p"))
#+END_SRC

*** open urls in default browser

#+BEGIN_SRC emacs-lisp
  (when (display-graphic-p)
    (setq browse-url-browser-function 'browse-url-default-macosx-browser))
#+END_SRC


** Key bindings

This section contains all my emacs key bindings.  I like keeping all my key bindings in one place rather than with each package.

*** emacs settings

#+BEGIN_SRC emacs-lisp
  ;;; (e)dit (e)macs user init file
  (defvar --emacs-config (concat user-emacs-directory "emacs-config.org"))
  (evil-leader/set-key "ee" (lambda () (interactive) (find-file --emacs-config)))

  ;;; (s)ource (e)macs user init file
  (evil-leader/set-key "se" (lambda () (interactive) (load-file user-init-file)))

  ;;; (r)estart (e)macs
  (evil-leader/set-key "re" #'restart-emacs)
#+END_SRC

*** package management

#+BEGIN_SRC emacs-lisp

  ;;; package management
  (evil-leader/set-key
    "Pl" #'package-list-packages             ; (P)ackage (l)ist
    "Pu" #'package-list-packages             ; (P)ackage (u)pgrade
    "Pi" #'package-install                   ; (P)ackage (i)nstall
    "PI" #'package-install-selected-packages ; (P)ackage (I)nstall full list
    "Pd" #'package-delete                    ; (P)ackage (d)elete
    "Pa" #'package-autoremove)               ; (P)ackage (a)utoremove
#+END_SRC

*** evil-mode

#+BEGIN_SRC emacs-lisp
  ;;; evil emacs conflicts
  (define-key evil-normal-state-map (kbd "C-u") #'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") #'evil-scroll-up)

  ;;; enter evil-emacs-state for interacting with certain buffers
  (evil-leader/set-key "em" #'evil-emacs-state)

  ;;; evil vim inconsistencies
  (define-key evil-visual-state-map (kbd "x") #'evil-delete)

  ;;; evil escape (use escape for C-g in evil-mode)
  (define-key evil-normal-state-map           [escape] #'keyboard-quit)
  (define-key evil-visual-state-map           [escape] #'keyboard-quit)
  (define-key minibuffer-local-map            [escape] #'cs-minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map         [escape] #'cs-minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] #'cs-minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] #'cs-minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map    [escape] #'cs-minibuffer-keyboard-quit)
  (define-key ivy-minibuffer-map              [escape] #'cs-minibuffer-keyboard-quit)
  (global-set-key                             [escape] #'evil-exit-emacs-state)

  ;;; evil line movement tweaks
  (define-key evil-motion-state-map "j" #'evil-next-visual-line)
  (define-key evil-motion-state-map "k" #'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" #'evil-next-visual-line)
  (define-key evil-visual-state-map "k" #'evil-previous-visual-line)
#+END_SRC

*** window control

#+BEGIN_SRC emacs-lisp
  ;;; cycle themes
  ;;(evil-leader/set-key "ct" #'cycle-themes)

  ;;; full screen toggle
  (global-set-key (kbd "s-<return>") #'toggle-frame-fullscreen) ; s = super (⌘ on mac)

  ;;; hide others with macOS default keyboard shortcut of `⌥⌘H`
  (global-set-key (kbd "M-s-˙") #'ns-do-hide-others)
  ;; the `˙` in the above keybind is due to opt h producing that char

  ;;; window splitting
  (global-set-key (kbd "C--")  #'evil-window-split)
  (global-set-key (kbd "C-\\") #'evil-window-vsplit)
  (global-set-key (kbd "C-=")  #'balance-windows)

  ;;; resize windows
  (global-set-key (kbd "s-<right>") #'evil-window-increase-width)
  (global-set-key (kbd "s-<left>")  #'evil-window-decrease-width)
  (global-set-key (kbd "s-<up>")    #'evil-window-increase-height)
  (global-set-key (kbd "s-<down>")  #'evil-window-decrease-height)

  ;;; move to next / prev window
  ;; force override bindings from all modes
  (bind-keys*
   ("C-k" . evil-window-up)
   ("C-j" . evil-window-down)
   ("C-h" . evil-window-left)
   ("C-l" . evil-window-right))

  ;;; move/swap buffers between windows
  (global-set-key (kbd "C-S-K") #'buf-move-up)
  (global-set-key (kbd "C-S-J") #'buf-move-down)
  (global-set-key (kbd "C-S-H") #'buf-move-left)
  (global-set-key (kbd "C-S-L") #'buf-move-right)

  ;;; window controls
  ;;; press `C-w` to see built-in evil-mode window controls
  (evil-leader/set-key
    "wc" #'evil-window-delete    ; (w)indow (c)lose
    "wm" #'delete-other-windows) ; (w)indow (m)ain
  (define-key evil-motion-state-map (kbd "C-z") #'zoom-window-zoom)

  ;;; clear / recenter screen
  (evil-leader/set-key
    "cs" #'recenter-top-bottom      ; (c)lear (s)creen
    "cr" #'cider-repl-clear-buffer) ; (c)lear (r)epl

  ;;; text scale
  (global-set-key (kbd "s-+") #'text-scale-increase)
  (global-set-key (kbd "s--") #'text-scale-decrease)
  (global-set-key (kbd "s-=") #'text-scale-adjust)
#+END_SRC

*** project navigation

#+BEGIN_SRC emacs-lisp
  ;;; bookmarks
  (evil-leader/set-key
    "ml" #'bookmark-jump
    "mj" #'bookmark-jump
    "ms" #'bookmark-set
    "md" #'bookmark-delete)

  ;;; set a nicer M-x
  (global-set-key (kbd "M-x") #'counsel-M-x)

  ;;; allow for jk menu nav
  (define-key ivy-minibuffer-map (kbd "s-j") #'ivy-next-line)
  (define-key ivy-minibuffer-map (kbd "s-k") #'ivy-previous-line)

  ;;; projects / files / buffers
  (evil-leader/set-key
    "Ff" #'find-file                     ; (F)ind (f)ile
    "t"  #'counsel-projectile-find-file  ; emulate command-(t)
    "b"  #'ivy-switch-buffer             ; switch to (b)uffer
    "kb" #'kill-buffer                   ; (k)ill (b)uffer
    "gf" #'counsel-projectile-ag)        ; (g)rep in (f)iles

  ;;; neotree
  (evil-leader/set-key "nt" #'neotree-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)

  ;;; workspaces
  (evil-leader/set-key
    "ps" 'persp-switch
    "pk" 'persp-remove-buffer
    "pc" 'persp-kill
    "pr" 'persp-rename
    "pa" 'persp-add-buffer
    "pA" 'persp-set-buffer
    "pi" 'persp-import
    "pn" 'persp-next
    "pp" 'persp-prev)

  ;;; dired navigation
  ;; g to update dired buffer info
  ;; s to toggle between sort by name and by date/time
  ;; + create dir
  ;; for creating, deleting, renaming, just toggle shell visor, then update dired
  (evil-leader/set-key "Fd" #'cs-open-dired-at-current-dir) ; (F)ind via (d)ired
#+END_SRC

*** terminal

#+BEGIN_SRC emacs-lisp
  ;;; toggle/open shell
  (evil-leader/set-key
    "sv" (lambda () (interactive)         ; toggle (s)hell (v)isor
           (multi-term-dedicated-toggle)
           (multi-term-dedicated-select))
    "sn" (lambda () (interactive)         ; toggle (s)hell (n)ew
           ;; update buffer name setting dynamically for each perspective
           (setq-default multi-term-buffer-name (concat "term-" (elt persp-curr 1)))
           (multi-term)))

  ;;; multi term keybind setup - full vi-mode in zsh within emacs
  ;; don't leave emacs mode when pressing esc, pass through for vim compatability
  (evil-define-key 'emacs  term-raw-map [escape]           #'term-send-esc)
  ;; super-esc toggle emacs and evil modes
  (evil-define-key 'emacs  term-raw-map (kbd "s-<escape>") #'evil-exit-emacs-state)
  (evil-define-key 'normal term-raw-map (kbd "s-<escape>") #'evil-emacs-state)
  ;; never use evil insert mode in term-mode, prefer our shell's vi-mode
  (evil-define-key 'normal term-raw-map "i"                #'evil-emacs-state)
  ;; trample "C-c" emacs bind so it behaves like a normal shell interrupt
  (evil-define-key 'normal term-raw-map (kbd "C-c")        #'term-send-raw)
  (evil-define-key 'emacs  term-raw-map (kbd "C-c")        #'term-send-raw)
  ;; fix pasting into terminal without needing line-mode
  (evil-define-key 'emacs  term-raw-map (kbd "s-v")        #'term-paste)
  ;; vi-mode and vim compatability
  (evil-define-key 'emacs  term-raw-map (kbd "C-v")        #'term-send-raw)
  (evil-define-key 'emacs  term-raw-map (kbd "C-r")        #'term-send-raw)
#+END_SRC

*** electric return

be explicit about where to enable "electric return", as some modes have their own.

#+BEGIN_SRC emacs-lisp
  (dolist (hook
           '(cider-mode-hook
             clojure-mode-hook
             emacs-lisp-mode-hook
             lisp-interaction-mode-hook
             lisp-mode-hook
             org-mode-hook
             python-mode-hook
             ruby-mode-hook
             yaml-mode-hook))
    (add-hook hook
              (lambda ()
                (local-set-key (kbd "RET") #'cs-electrify-return-if-match))))

#+END_SRC

*** jump to line / word

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "jl" #'evil-ace-jump-line-mode
    "jw" #'evil-ace-jump-word-mode
    "jc" #'evil-ace-jump-char-mode)
#+END_SRC

*** remove search highlight

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "/" #'evil-search-highlight-persist-remove-all)
#+END_SRC

*** commenting

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "cl" #'evilnc-comment-or-uncomment-lines
    "cp" #'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC

*** yank / kill history

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "kr" #'counsel-yank-pop)
#+END_SRC

*** doc search

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "d" #'dash-at-point)
#+END_SRC

*** line number toggle

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "nn" #'linum-mode)
#+END_SRC

*** column enforcement toggle

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key "ce" #'column-enforce-mode)
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "fcb" 'flycheck-buffer         ; (f)ly(c)heck (b)uffer
    "fcn" 'flycheck-next-error     ; (f)ly(c)heck (n)ext
    "fcp" 'flycheck-previous-error ; (f)ly(c)heck (p)revious
    "fcl" 'flycheck-list-errors)   ; (f)ly(c)heck (l)ist
#+END_SRC

*** paredit

#+BEGIN_SRC emacs-lisp
  ;; see use-package section for paredit above
#+END_SRC

*** git

#+BEGIN_SRC emacs-lisp
  ;;; magit
  ;; see use-package section for magit above
#+END_SRC

*** clojure / cider

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "ri"  #'cider-jack-in                       ; (r)epl (i)nitialize
    "rr"  #'cider-restart                       ; (r)epl (r)estart
    "rq"  #'cider-quit                          ; (r)epl (q)uit
    "rc"  #'cider-connect                       ; (r)epl (c)onnect
    "eb"  #'cider-eval-buffer                   ; (e)val (b)uffer
    "ef"  #'cider-eval-defun-at-point           ; (e)val de(f)un
    "es"  #'cider-eval-last-sexp                ; (e)val (s)-expression
    "rtn" #'cider-test-run-ns-tests             ; (r)un (t)ests (n)amespace
    "rtp" #'cider-test-run-project-tests        ; (r)un (t)ests (p)roject
    "rtl" #'cider-test-run-loaded-tests         ; (r)un (t)ests (l)oaded namespaces
    "rtf" #'cider-test-rerun-failed-tests       ; (r)erun (t)ests (f)ailed tests
    "rta" #'cider-auto-test-mode                ; (r)un (t)ests (a)utomatically
    "rb"  #'cider-switch-to-repl-buffer         ; (r)epl (b)uffer
    "rl"  #'cider-switch-to-last-clojure-buffer ; (r)epl (l)ast buffer
    "rn"  #'cider-repl-set-ns                   ; (r)epl set (n)amespace
    "rp"  #'cider-repl-toggle-pretty-printing   ; (r)epl (p)retty print
    "rh"  #'cider-repl-history                  ; (r)epl (h)istory
    "ff"  #'cider-format-defun                  ; (f)ormat (f)orm
    "fr"  #'cider-format-region                 ; (f)ormat (r)egion
    "fb"  #'cider-format-buffer                 ; (f)ormat (b)uffer
    )
  ;; replace C-j keybind in cider-repl with S-<return>
  ;; set evil style j and k in cider-test-report-mode
  (with-eval-after-load "cider"
    (bind-key "S-<return>" #'cider-repl-newline-and-indent cider-repl-mode-map)
    (define-key cider-test-report-mode-map (kbd "k") #'previous-line)
    (define-key cider-test-report-mode-map (kbd "j") #'next-line))
#+END_SRC

*** markdown

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "Mb" 'markdown-insert-bold
    "Me" 'markdown-insert-italic
    "Ms" 'markdown-insert-strike-through
    "Ml" 'markdown-insert-link
    "Mu" 'markdown-insert-uri
    "Mi" 'markdown-insert-image
    "Mh" 'markdown-insert-hr
    "Mf" 'markdown-insert-footnote
    "Mp" 'cs-marked-preview-file)
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key-for-mode 'org-mode "es" 'org-edit-special)
  (evil-leader/set-key
    "cc" 'org-edit-src-exit
    "cC" 'org-edit-src-abort)
#+END_SRC

*** ruby-mode

#+BEGIN_SRC emacs-lisp
  ;; TODO keybinds for buffer eval
#+END_SRC

*** python-mode

#+BEGIN_SRC emacs-lisp
  ;; TODO keybinds for buffer eval
#+END_SRC

*** report emacs total load time

#+BEGIN_SRC emacs-lisp
  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loaded emacs in %.3fs" elapsed))
#+END_SRC

*** suppress flycheck warnings in emacs config

#+BEGIN_SRC emacs-lisp
  ;; Local Variables:
  ;; byte-compile-warnings: (not free-vars)
  ;; End:
#+END_SRC
