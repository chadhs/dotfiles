* Emacs Configuration

** TODOS

move keybinds into use-package statements
move emacs load time reporting out of other sections (unless related to section)


** bootstrap use-package

#+BEGIN_SRC emacs-lisp
(defconst emacs-start-time (current-time))

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives
      '(("gnu"           . "https://elpa.gnu.org/packages/")
	("melpa"         . "https://melpa.org/packages/")
	("melpa-stable"  . "https://stable.melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

(setq use-package-always-ensure t)

(let ((elapsed (float-time (time-subtract (current-time)
					  emacs-start-time))))
  (message "boot-strapped use-package in %.3fs" elapsed))
#+END_SRC

** package specific configuration

*** global packages

#+BEGIN_SRC emacs-lisp
  ;; emacs enhancements
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (exec-path-from-shell-initialize))
  (use-package restart-emacs
    :defer t
    :init
    (evil-leader/set-key "re" #'restart-emacs))
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
  (use-package multi-term
    :defer t
    :init
    (setq multi-term-dedicated-window-height 30
          multi-term-program "/usr/local/bin/zsh")
    (add-hook 'term-mode-hook
              (lambda ()
                (setq term-buffer-maximum-size 10000)
                (setq yas-dont-activate t)
                (setq-local scroll-margin 0)
                (setq-local scroll-conservatively 0)
                (setq-local scroll-step 1)
                (setq-local evil-emacs-state-cursor 'bar)
                (setq-local global-hl-line-mode nil)))

    (evil-leader/set-key
      "sv" (lambda () (interactive) ; toggle (s)hell (v)isor
             (multi-term-dedicated-toggle)
             (multi-term-dedicated-select))
      "sn" 'multi-term)        ; toggle (s)hell (n)ew
    ) 

  ;; editing enhancements
  (use-package ace-jump-mode
    :defer t)
  (use-package aggressive-indent
    :config
    (global-aggressive-indent-mode 1)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
  (use-package column-enforce-mode
    :diminish column-enforce-mode
    :init
    (setq column-enforce-column 81
          column-enforce-comments nil)
    (add-hook 'prog-mode-hook #'column-enforce-mode))
  (use-package editorconfig
    :mode (".editorconfig" . editorconfig-conf-mode)
    :diminish "↹")
  (use-package paredit
    :diminish "⒫")
  (use-package rainbow-delimiters
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (add-hook 'yaml-mode-hook #'rainbow-delimiters-mode))
  (use-package yasnippet
    :ensure nil
    :defer t
    :diminish yas-minor-mode)

  ;; auto-completion
  (use-package auto-complete
    :diminish "⇥")

  ;; syntax checking
  (use-package flycheck
    :diminish "✓"
    :init
    ;; disable documentation related emacs lisp checker
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
    (add-hook 'after-init-hook #'global-flycheck-mode))

  (use-package flycheck-pos-tip
    ;; floating tooltips only works in graphical mode
    :if (display-graphic-p (selected-frame))
    :init
    (setq flycheck-display-errors-function 'flycheck-pos-tip-error-messages)
    :config
    (flycheck-pos-tip-mode))

  ;; themes
  (use-package solarized-theme
    :if (display-graphic-p)
    :config
    (load-theme 'solarized-dark t)
    (load-theme 'solarized-light t))

  (use-package ample-theme
    :if (not (display-graphic-p))
    :config
    (load-theme 'ample t))

  (use-package cycle-themes
    :if (display-graphic-p)
    :init
    (setq cycle-themes-theme-list
          '(solarized-dark
            solarized-light))
    :config
    (evil-leader/set-key "ct" #'cycle-themes))

  (use-package emojify)

  ;; modeline
  ;;(use-package spaceline-config
  ;; :ensure spaceline
  ;; :init
  ;; (setq spaceline-highlight-face-func #'spaceline-highlight-face-evil-state
  ;;       powerline-default-separator nil
  ;;       spaceline-buffer-size-p nil)
  ;; :config
  ;; (spaceline-spacemacs-theme)
  ;; (set-face-attribute 'spaceline-evil-emacs   nil :background "#6c71c4" :foreground "#eee8d5")
  ;; (set-face-attribute 'spaceline-evil-normal  nil :background "#859900" :foreground "#eee8d5")
  ;; (set-face-attribute 'spaceline-evil-insert  nil :background "#268bd2" :foreground "#eee8d5")
  ;; (set-face-attribute 'spaceline-evil-visual  nil :background "#cb4b16" :foreground "#eee8d5")
  ;; (set-face-attribute 'spaceline-evil-replace nil :background "#dc322f" :foreground "#eee8d5")
  ;; (set-face-attribute 'spaceline-evil-motion  nil :background "#d33682" :foreground "#eee8d5"))

  ;; vim mode
  (use-package evil
    :config
    (evil-mode 1))
  (use-package evil-cleverparens
    :diminish "⒞")
  (use-package evil-leader
    :init
    (setq evil-leader/in-all-states 1)
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader ","))
  (use-package evil-matchit)
  (use-package evil-nerd-commenter)
  (use-package evil-search-highlight-persist)
  (use-package evil-surround)
  (use-package evil-visualstar)
  (use-package vi-tilde-fringe
    :diminish vi-tilde-fringe-mode
    :init
    (add-hook 'prog-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'conf-space-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'markdown-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'org-mode-hook #'vi-tilde-fringe-mode)
    (add-hook 'yaml-mode-hook #'vi-tilde-fringe-mode))

  ;; docs
  (use-package dash-at-point
    :defer t) ; launch Dash on macOS

  ;; workspace / project / file / buffer mgmt
  (use-package buffer-move
    :defer t)
  (use-package helm
    :defer t
    :diminish helm-mode)
  (use-package helm-ag
    :defer t)
  (use-package helm-flx
    :defer t)
  (use-package helm-projectile
    :defer t)
  (use-package magit
    :defer t)
  (use-package neotree
    :defer t)
  (use-package perspective
    ;; prevent reloading persp-mode when reloading emacs config
    :if (not (bound-and-true-p persp-mode))
    :config
    (persp-mode)
    (evil-leader/set-key
      "ps" 'persp-switch
      "pk" 'persp-remove-buffer
      "pc" 'persp-kill
      "pr" 'persp-rename
      "pa" 'persp-add-buffer
      "pA" 'persp-set-buffer
      "pi" 'persp-import
      "pn" 'persp-next
      "pp" 'persp-prev)) ; workspace manager
  (use-package projectile
    :defer t)
  (use-package zoom-window
    :defer t)

#+END_SRC

*** buffer local packages

#+BEGIN_SRC emacs-lisp
;; editing enhancements
(use-package ac-cider
  :defer t)

;; syntax checking
(use-package flycheck-clojure
  :defer t)

;; emacs-lisp
(use-package emacs-lisp-mode
  :ensure nil
  :mode ("\\.emacs" . emacs-lisp-mode))

;; org-mode
(use-package org-bullets
  :defer t)

;; clojure
(use-package cider
  :defer t)
(use-package clojure-mode
  :defer t)
(use-package clojure-mode-extra-font-locking
  :defer t)
(use-package clj-refactor
  :defer t
  :diminish "↻")
(use-package cljr-helm
  :defer t)

;; ruby
(use-package inf-ruby
  :defer t)
(use-package robe
  :defer t)

;; python
(use-package elpy
  :defer t)

;; other syntaxes
(use-package dockerfile-mode
  :mode ("Dockerfile\\'" . dockerfile-mode))
(use-package lua-mode
  :defer t)
(use-package markdown-mode
  :mode (("\\.md"  . markdown-mode)
	 ("\\.txt" . markdown-mode)))
(use-package json-mode
  :defer t)
(use-package salt-mode
  :defer t
  :diminish mmm-mode)
(use-package terraform-mode
  :defer t)
(use-package web-mode
  :mode (("\\.html?\\'"  . web-mode)
	 ("\\.css?\\'"   . web-mode)
	 ("\\.scss?\\'"  . web-mode)
	 ("\\.less?\\'"  . web-mode)
	 ("\\.js?\\'"    . web-mode)
	 ("\\.php?\\'"   . web-mode)
	 ("\\.jinja?\\'" . web-mode)
	 ("\\.j2?\\'"    . web-mode)))
(use-package yaml-mode
  :mode ("\\.yml" . yaml-mode))

(let ((elapsed (float-time (time-subtract (current-time)
					  emacs-start-time))))
  (message "loaded packages in %.3fs" elapsed))
#+END_SRC

** user functions

This section contains any functions and their purpose.

*** command aliases

Explain: yes and no prompts

#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** electric return

Explain: Electric return functionality

#+BEGIN_SRC emacs-lisp
(defvar electrify-return-match
  "[\]}\)]"
  "If this regexp matches the text after the cursor, do an \"electric\" return.")

(defun electrify-return-if-match (arg)
  "When text after cursor and ARG match, open and indent an empty line.
  Do this between the cursor and the text.  Then move the cursor to the new line."
  (interactive "P")
  (let ((case-fold-search nil))
    (if (looking-at electrify-return-match)
	(save-excursion (newline-and-indent)))
    (newline arg)
    (indent-according-to-mode)))
#+END_SRC

*** evil escape

Explain: Make escape act like C-g in evil-mode

#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))
#+END_SRC

*** preview file with marked

#+BEGIN_SRC emacs-lisp
(defun marked-preview-file ()
  "use Marked 2 to preview the current file"
  (interactive)
  (shell-command
   (format "open -a 'Marked 2.app' %s"
	   (shell-quote-argument (buffer-file-name)))))
#+END_SRC

** user configuration

This section is where all general emacs configuration lives.

*** custom mode-line configuration

Packages like spaceline are great, but can add a lot of overhead, and also limit you.
I've set up my own custom modeline that provides a format that looks like this:

N filename[*]branch mode:minors [project] Err U:line:col [main] 29%

#+BEGIN_SRC emacs-lisp
(setq-default
 mode-line-format
 (list
  '(:eval
    (propertize
     evil-mode-line-tag
     ;; let's give our evil/vim state a nice visual cue by adding some color
     'face (cond
	    ((string= evil-mode-line-tag " <E> ") '(:background "#6c71c4" :foreground "#eee8d5"))
	    ((string= evil-mode-line-tag " <N> ") '(:background "#859900" :foreground "#eee8d5"))
	    ((string= evil-mode-line-tag " <I> ") '(:background "#268bd2" :foreground "#eee8d5"))
	    ((string= evil-mode-line-tag " <V> ") '(:background "#cb4b16" :foreground "#eee8d5"))
	    ((string= evil-mode-line-tag " <R> ") '(:background "#dc322f" :foreground "#eee8d5")))))
  " " mode-line-buffer-identification "[%*]"
  '(vc-mode (:eval (second (split-string vc-mode "-")))) " "
  "%m:"
  minor-mode-alist
  '(flycheck-mode-line flycheck-mode-line) " "
  "%Z"
  "%l:%c "
  '(persp-modestring persp-modestring) " "
  "%p"))

;;(setq-default
;; mode-line-format
;; '("%e" "moo" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position evil-mode-line-tag
;;  (vc-mode vc-mode)
;;  "  " mode-line-modes mode-line-misc-info mode-line-end-spaces))
#+END_SRC

*** macOS keybinding fix

For iTerm: Go to Preferences > Profiles > (your profile) > Keys > Left option key acts as: > choose +Esc

*** startup behavior

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** set default starting directory (avoid launching projectile at HOME or src root)

#+BEGIN_SRC emacs-lisp
(defvar --user-home-dir (concat (getenv "HOME") "/"))
(defvar --user-src-dir (concat --user-home-dir "src/"))
(defvar --user-scratch-dir (concat --user-src-dir "scratch/"))
(unless (file-exists-p --user-scratch-dir)
  (make-directory --user-scratch-dir t))
(when (or (string= default-directory "~/")
	  (string= default-directory --user-home-dir)
	  (string= default-directory --user-src-dir))
  (setq default-directory --user-scratch-dir))
#+END_SRC

*** default to utf8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
#+END_SRC

*** pretty symbols

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode)
#+END_SRC

*** always end with a newline

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** word wrapping

#+BEGIN_SRC emacs-lisp
(setq-default word-wrap t)
(visual-line-mode 1)
#+END_SRC

*** move through camelCaseWords
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC

*** highlight matching parens

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'parenthesis
      show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

*** font settings

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Menlo" :height 140 :weight 'normal)
#+END_SRC

*** turn off menu-bar, tool-bar, and scroll-bar

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (display-graphic-p)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC

*** hi-light current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC

*** smoother scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-margin 8
      scroll-conservatively 100
      scroll-step 1)
#+END_SRC

*** slower smoother trackpad scrolling

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

*** fix ls warning when dired launches on macOS

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (require 'ls-lisp)
  (setq ls-lisp-use-insert-directory-program nil))
#+END_SRC

*** initial widow size and position (`left . -1` is to get close to right align)

#+BEGIN_SRC emacs-lisp
(setq initial-frame-alist '((top . 0) (left . -1) (width . 120) (height . 80)))
#+END_SRC

*** tab settings

#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil)
#+END_SRC

*** remember cursor position in buffers

#+BEGIN_SRC emacs-lisp
(if (version< emacs-version "25.1")
    (lambda ()
      (require 'saveplace)
      (setq-default save-place t))
  (save-place-mode 1))
#+END_SRC

*** store auto-save and backup files in ~/.emacs.d/backups/

#+BEGIN_SRC emacs-lisp
(defvar --backup-dir (concat user-emacs-directory "backups"))
(unless (file-exists-p --backup-dir)
  (make-directory --backup-dir t))
(setq backup-directory-alist `((".*" . ,--backup-dir)))
(setq auto-save-file-name-transforms `((".*" ,--backup-dir t)))
(setq backup-by-copying t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t
      auto-save-default t)
#+END_SRC

*** version control

#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

*** set initial evil state for particular modes

#+BEGIN_SRC emacs-lisp
(cl-loop for (mode . state) in '((cider-test-report-mode . emacs)
				 (dired-mode             . normal)
				 (magit-mode             . normal)
				 (magit-status-mode      . emacs)
				 (magit-diff-mode        . normal)
				 (magit-log-mode         . normal)
				 (magit-process-mode     . normal)
				 (magit-popup-mode       . emacs)
				 ;; this allows vi-mode in zsh shells
				 (term-mode              . emacs))
	 do (evil-set-initial-state mode state))
#+END_SRC

*** modeline tweaks

#+BEGIN_SRC emacs-lisp
(diminish 'auto-revert-mode "Ⓐ")
(diminish 'subword-mode)
(diminish 'undo-tree-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq projectile-mode-line '(:eval (format " [%s] " (projectile-project-name))))
(setq cider-mode-line '(:eval (format " [%s]" (cider--modeline-info))))
#+END_SRC

*** open urls in default browser

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (setq browse-url-browser-function 'browse-url-default-macosx-browser))
#+END_SRC

** key bindings

This section contains all my emacs key bindings.  I like keeping all my key bindings in one place rather than with each package.

*** emacs settings

#+BEGIN_SRC emacs-lisp
  ;;; (e)dit (e)macs user init file
(defvar --emacs-config (concat user-emacs-directory "emacs-config.org"))
(evil-leader/set-key "ee" (lambda () (interactive) (find-file --emacs-config)))

  ;;; (s)ource (e)macs user init file
(evil-leader/set-key "se" (lambda () (interactive) (load-file user-init-file)))

  ;;; (r)estart (e)macs
#+END_SRC

*** package management

#+BEGIN_SRC emacs-lisp

  ;;; package management
(evil-leader/set-key
  "Pl" #'package-list-packages             ; (P)ackage (l)ist
  "Pu" #'package-list-packages             ; (P)ackage (u)pgrade
  "Pi" #'package-install                   ; (P)ackage (i)nstall
  "PI" #'package-install-selected-packages ; (P)ackage (I)nstall full list
  "Pd" #'package-delete                    ; (P)ackage (d)elete
  "Pa" #'package-autoremove)               ; (P)ackage (a)utoremove
#+END_SRC

*** evil-mode

#+BEGIN_SRC emacs-lisp
  ;;; evil emacs conflicts
(define-key evil-normal-state-map (kbd "C-u") #'evil-scroll-up)
(define-key evil-visual-state-map (kbd "C-u") #'evil-scroll-up)

  ;;; enter evil-emacs-state for interacting with certain buffers
(evil-leader/set-key "em" #'evil-emacs-state)

  ;;; evil vim inconsistencies
(define-key evil-visual-state-map (kbd "x") #'evil-delete)

  ;;; evil escape (use escape for C-g in evil-mode)
(define-key evil-normal-state-map           [escape] #'keyboard-quit)
(define-key evil-visual-state-map           [escape] #'keyboard-quit)
(define-key minibuffer-local-map            [escape] #'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map         [escape] #'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] #'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] #'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map    [escape] #'minibuffer-keyboard-quit)
(global-set-key                             [escape] #'evil-exit-emacs-state)

  ;;; evil line movement tweaks
(define-key evil-motion-state-map "j" #'evil-next-visual-line)
(define-key evil-motion-state-map "k" #'evil-previous-visual-line)
(define-key evil-visual-state-map "j" #'evil-next-visual-line)
(define-key evil-visual-state-map "k" #'evil-previous-visual-line)
#+END_SRC

*** window control

#+BEGIN_SRC emacs-lisp
  ;;; full screen toggle
(global-set-key (kbd "s-<return>") #'toggle-frame-fullscreen) ; s = super (⌘ on mac)

  ;;; hide others with macOS default keyboard shortcut of `⌥⌘H`
(global-set-key (kbd "M-s-˙") #'ns-do-hide-others)
;; the `˙` in the above keybind is due to opt h producing that char

  ;;; window splitting
(global-set-key (kbd "C--")  #'evil-window-split)
(global-set-key (kbd "C-\\") #'evil-window-vsplit)
(global-set-key (kbd "C-=")  #'balance-windows)

  ;;; resize windows
(global-set-key (kbd "s-<right>") #'evil-window-increase-width)
(global-set-key (kbd "s-<left>")  #'evil-window-decrease-width)
(global-set-key (kbd "s-<up>")    #'evil-window-increase-height)
(global-set-key (kbd "s-<down>")  #'evil-window-decrease-height)

  ;;; move to next / prev window
;; force override bindings from all modes
(bind-keys*
 ("C-k" . evil-window-up)
 ("C-j" . evil-window-down)
 ("C-h" . evil-window-left)
 ("C-l" . evil-window-right))

  ;;; move/swap buffers between windows
(global-set-key (kbd "C-S-K") #'buf-move-up)
(global-set-key (kbd "C-S-J") #'buf-move-down)
(global-set-key (kbd "C-S-H") #'buf-move-left)
(global-set-key (kbd "C-S-L") #'buf-move-right)

  ;;; window controls
  ;;; press `C-w` to see built-in evil-mode window controls
(evil-leader/set-key
  "wc" #'evil-window-delete    ; (w)indow (c)lose
  "wm" #'delete-other-windows) ; (w)indow (m)ain
(define-key evil-motion-state-map (kbd "C-z") #'zoom-window-zoom)

  ;;; clear / recenter screen
(evil-leader/set-key
  "cs" #'recenter-top-bottom      ; (c)lear (s)creen
  "cr" #'cider-repl-clear-buffer) ; (c)lear (r)epl

  ;;; text scale
(global-set-key (kbd "s-+") #'text-scale-increase)
(global-set-key (kbd "s--") #'text-scale-decrease)
(global-set-key (kbd "s-=") #'text-scale-adjust)
#+END_SRC

*** project navigation

#+BEGIN_SRC emacs-lisp
  ;;; bookmarks
(evil-leader/set-key
  "ml" #'bookmark-jump
  "mj" #'bookmark-jump
  "ms" #'bookmark-set
  "md" #'bookmark-delete)

  ;;; set emacs command hotkey (M-x) to (helm-M-x)
(global-set-key (kbd "M-x") #'helm-M-x)

  ;;; helm menu nav
					;(define-key helm-map (kbd "s-j") #'helm-next-line)
					;(define-key helm-map (kbd "s-k") #'helm-previous-line)

  ;;; projects / files / buffers
(evil-leader/set-key
  "F"  #'find-file                      ; (F)ind file
  "t"  #'helm-projectile-find-file-dwim ; emulate command-(t)
  "b"  #'helm-buffers-list              ; switch to (b)uffer
  "kb" #'kill-buffer                    ; (k)ill (b)uffer
  "gf" #'helm-projectile-ag)            ; (g)rep in (f)iles

  ;;; neotree
(evil-leader/set-key "nt" #'neotree-toggle)
(evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-enter)
(evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
(evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)

  ;;; workspaces

  ;;; dired navigation
;; g to update dired buffer info
;; s to toggle between sort by name and by date/time
;; for creating, deleting, renaming, just toggle shell visor, then update dired
#+END_SRC

*** terminal

#+BEGIN_SRC emacs-lisp
  ;;; toggle/open shell

  ;;; multi term keybind setup - full vi-mode in zsh within emacs
;; don't leave emacs mode when pressing esc, pass through for vim compatability
(evil-define-key 'emacs  term-raw-map [escape]           #'term-send-esc)
;; super-esc toggle emacs and evil modes
(evil-define-key 'emacs  term-raw-map (kbd "s-<escape>") #'evil-exit-emacs-state)
(evil-define-key 'normal term-raw-map (kbd "s-<escape>") #'evil-emacs-state)
;; never use evil insert mode in term-mode, prefer our shell's vi-mode
(evil-define-key 'normal term-raw-map "i"                #'evil-emacs-state)
;; trample "C-c" emacs bind so it behaves like a normal shell interrupt
(evil-define-key 'normal term-raw-map (kbd "C-c")        #'term-send-raw)
(evil-define-key 'emacs  term-raw-map (kbd "C-c")        #'term-send-raw)
;; fix pasting into terminal without needing line-mode
(evil-define-key 'emacs  term-raw-map (kbd "s-v")        #'term-paste)
;; vi-mode and vim compatability
(evil-define-key 'emacs  term-raw-map (kbd "C-v")        #'term-send-raw)
(evil-define-key 'emacs  term-raw-map (kbd "C-r")        #'term-send-raw)
#+END_SRC

*** electric return

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") #'electrify-return-if-match)
#+END_SRC

*** jump to line / word

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "jl" #'evil-ace-jump-line-mode
  "jw" #'evil-ace-jump-word-mode
  "jc" #'evil-ace-jump-char-mode)
#+END_SRC

*** remove search highlight

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "/" #'evil-search-highlight-persist-remove-all)
#+END_SRC

*** commenting

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "cl" #'evilnc-comment-or-uncomment-lines
  "cp" #'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC

*** yank / kill history

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "kr" #'helm-show-kill-ring)
#+END_SRC

*** doc search

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "d" #'dash-at-point)
#+END_SRC

*** line number toggle

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "nn" #'linum-mode)
#+END_SRC

*** column enforcement toggle

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key "ce" #'column-enforce-mode)
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "fcb" 'flycheck-buffer         ; (f)ly(c)heck (b)uffer
  "fcn" 'flycheck-next-error     ; (f)ly(c)heck (n)ext
  "fcp" 'flycheck-previous-error ; (f)ly(c)heck (p)revious
  "fcl" 'flycheck-list-errors)   ; (f)ly(c)heck (l)ist
#+END_SRC

*** paredit

#+BEGIN_SRC emacs-lisp
;; barf == push out of current sexp
;; slurp == pull into current sexp
;; use `Y` not `yy` for yanking a line maintaining balanced parens
;; use `y%` for yanking a s-expression
(evil-leader/set-key
  "W"   #'paredit-wrap-sexp
  "w("  #'paredit-wrap-sexp
  "w["  #'paredit-wrap-square
  "w{"  #'paredit-wrap-curly
  "w<"  #'paredit-wrap-angled
  "w\"" #'paredit-meta-doublequote
  ">>"  #'paredit-forward-barf-sexp
  "><"  #'paredit-forward-slurp-sexp
  "<<"  #'paredit-backward-barf-sexp
  "<>"  #'paredit-backward-slurp-sexp
  "D"   #'paredit-splice-sexp         ; del surrounding ()[]{}
  "rs"  #'raise-sexp                  ; (r)aise (s)exp
  "ss"  #'paredit-split-sexp          ; (s)plit (s)exp
  "js"  #'paredit-join-sexps          ; (j)oin (s)exps
  "xs"  #'kill-sexp                   ; (x)delete (s)exp
  "xS"  #'backward-kill-sexp          ; (x)delete (S)exp backward
  "pt"  #'evil-cleverparens-mode)     ; clever(p)arens (t)oggle

;; prevent evil-cleverparens from setting x and X to delete and splice,
;; preventing it from "breaking" paredit's default strict behavior.
(with-eval-after-load 'evil-cleverparens
  (evil-define-key 'normal evil-cleverparens-mode-map
    (kbd "x") #'paredit-forward-delete
    (kbd "X") #'paredit-backward-delete))
#+END_SRC

*** git

#+BEGIN_SRC emacs-lisp
  ;;; magit
;; ? will pop up the built-in hotkeys from status mode
(evil-leader/set-key
  "gg"  #'magit-dispatch-popup
  "gst" #'magit-status
  "gd"  #'magit-diff-working-tree
  "gco" #'magit-checkout
  "gcm" #'magit-checkout
  "gcb" #'magit-branch-and-checkout
  "gl"  #'magit-pull-from-upstream
  "gaa" #'magit-stage-modified
  "grh" #'magit-reset-head
  "gca" #'magit-commit
  "gpu" #'magit-push-current-to-upstream
  "gt"  #'magit-tag
  "gpt" #'magit-push-tags)
;; specific within magit-mode
(evil-leader/set-key-for-mode 'text-mode
  "cc" 'with-editor-finish
  "cC" 'with-editor-cancel)
;; let's improve evil-mode compatability
(with-eval-after-load "magit"
  (define-key magit-status-mode-map (kbd "k") #'previous-line)
  (define-key magit-status-mode-map (kbd "K") 'magit-discard)
  (define-key magit-status-mode-map (kbd "j") #'next-line))
#+END_SRC

*** clojure / cider

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "ri"  #'cider-jack-in                       ; (r)epl (i)nitialize
  "rr"  #'cider-restart                       ; (r)epl (r)estart
  "rq"  #'cider-quit                          ; (r)epl (q)uit
  "rc"  #'cider-connect                       ; (r)epl (c)onnect
  "eb"  #'cider-eval-buffer                   ; (e)val (b)uffer
  "ef"  #'cider-eval-defun-at-point           ; (e)val de(f)un
  "es"  #'cider-eval-last-sexp                ; (e)val (s)-expression
  "rtn" #'cider-test-run-ns-tests             ; (r)un (t)ests (n)amespace
  "rtp" #'cider-test-run-project-tests        ; (r)un (t)ests (p)roject
  "rtl" #'cider-test-run-loaded-tests         ; (r)un (t)ests (l)oaded namespaces
  "rtf" #'cider-test-rerun-failed-tests       ; (r)erun (t)ests (f)ailed tests
  "rta" #'cider-auto-test-mode                ; (r)un (t)ests (a)utomatically
  "rb"  #'cider-switch-to-repl-buffer         ; (r)epl (b)uffer
  "rl"  #'cider-switch-to-last-clojure-buffer ; (r)epl (l)ast buffer
  "rn"  #'cider-repl-set-ns                   ; (r)epl set (n)amespace
  "rp"  #'cider-repl-toggle-pretty-printing   ; (r)epl (p)retty print
  "ff"  #'cider-format-defun                  ; (f)ormat (f)orm
  "fr"  #'cider-format-region                 ; (f)ormat (r)egion
  "fb"  #'cider-format-buffer                 ; (f)ormat (b)uffer
  "rf"  #'cljr-helm)                          ; clj (r)e(f)actor
;; replace C-j keybind in cider-repl with S-<return>
					;(bind-key "S-<return>" #'cider-repl-newline-and-indent cider-repl-mode-map)
;; set evil style j and k in cider-test-report-mode
(with-eval-after-load "cider"
  (define-key cider-test-report-mode-map (kbd "k") #'previous-line)
  (define-key cider-test-report-mode-map (kbd "j") #'next-line))
#+END_SRC

*** markdown

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
  "Mb" 'markdown-insert-bold
  "Me" 'markdown-insert-italic
  "Ms" 'markdown-insert-strike-through
  "Ml" 'markdown-insert-link
  "Mu" 'markdown-insert-uri
  "Mi" 'markdown-insert-image
  "Mh" 'markdown-insert-hr
  "Mf" 'markdown-insert-footnote
  "Mp" 'marked-preview-file)
#+END_SRC

*** org-mode

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'org-mode "es" 'org-edit-special)
(evil-leader/set-key
  "cc" 'org-edit-src-exit
  "cC" 'org-edit-src-abort)
#+END_SRC

*** ruby-mode

#+BEGIN_SRC emacs-lisp
;; TODO keybinds for buffer eval
#+END_SRC

*** python-mode

#+BEGIN_SRC emacs-lisp
;; TODO keybinds for buffer eval
#+END_SRC

*** report emacs total load time

#+BEGIN_SRC emacs-lisp
(let ((elapsed (float-time (time-subtract (current-time)
					  emacs-start-time))))
  (message "loaded emacs in %.3fs" elapsed))
#+END_SRC

*** suppress flycheck warnings in emacs config

#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not free-vars)
;; End:
#+END_SRC
