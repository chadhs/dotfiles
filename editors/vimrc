""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Chad Stovern's vimrc                                                       "
" Contact hello@chadstovern.com                                              "
"                                                                            "
" If you're new to vim watch Derek Wyatt's awesome tutorials                 "
" http://derekwyatt.org/vim/tutorials/novice/                                "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""" "bootstrap plugin system"

" Want this first; forget being compatible with good ol' vi
set nocompatible

" Vundle settings
"" filetype needs to be off for vundle but is set to on first to prevent a bug
filetype on
filetype off
"" Load the Vundle vim bundle (addon) manager
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#rc()


""""""" "plugins"

" vundle (let vundle manage and update itself)
Plugin 'gmarik/Vundle.vim'

" colorschemes
Plugin 'altercation/vim-colors-solarized'

" syntax and language support
"" clojure specific
Plugin 'guns/vim-clojure-static'
Plugin 'guns/vim-clojure-highlight'
Plugin 'vim-scripts/paredit.vim'
Plugin 'junegunn/rainbow_parentheses.vim'
Plugin 'tpope/vim-fireplace'
Plugin 'venantius/vim-cljfmt'
"" html & css
Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-haml'
Plugin 'plasticboy/vim-markdown'
"" python and friends
Plugin 'klen/python-mode'
Plugin 'chadhs/django.vim'
Plugin 'saltstack/salt-vim'
Plugin 'pearofducks/ansible-vim'
Plugin 'mitsuhiko/vim-jinja'
Plugin 'vim-scripts/yaml.vim'
"" common lisp & scheme
Plugin 'kovisoft/slimv'
"" javascript
Plugin 'kchmck/vim-coffee-script'
Plugin 'juvenn/mustache.vim'
"" java and friends
Plugin 'derekwyatt/vim-scala'
"" docs
Plugin 'rizzatti/dash.vim'

" status bar enhancement
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tpope/vim-fugitive' "this is just for airline branch display

" auto-completion engine
Plugin 'ajh17/VimCompletesMe'

" star for visual-mode
Plugin 'thinca/vim-visualstar'

" grep like search in the directory you're in
Plugin 'mileszs/ack.vim'

" replacement for command-t for quickly opening files & buffers
Plugin 'kien/ctrlp.vim'

" file tree navigator
Plugin 'scrooloose/nerdtree'

" enhanced word and character search movement
Plugin 'easymotion/vim-easymotion'

" narrow region allows you to capture one section and edit it in it's own buffer
Plugin 'chrisbra/NrrwRgn'

" close a buffer without destroying/deleting the buffer space
Plugin 'chadhs/bclose.vim'

" focus in on a split as if it were the only buffer open
Plugin 'vim-scripts/ZoomWin'

" auto closing parens, brackets, etc
Plugin 'Raimondi/delimitMate'

" change surrounding parens, brackets, etc by using 'cs'
Plugin 'tpope/vim-surround'

" use '.' to repeat addon commands such as 'cs'
Plugin 'tpope/vim-repeat'

" expand the scope of builtin bracket matching
Plugin 'vim-scripts/matchit.zip'

" side panel for showing all functions/methods/vars/etc in a project or file
Plugin 'majutsushi/tagbar'

" syntax checking addon
Plugin 'scrooloose/syntastic'

" syntax understanding auto commenter that is simply amazing
Plugin 'scrooloose/nerdcommenter'

" undo manager (that is very awesome)
Plugin 'sjl/gundo.vim'

" move between tmux and vim splits with common hotkeys
Plugin 'christoomey/vim-tmux-navigator'


""""""" "configuration"

" "The Bare Minimum"
" filetype on (set to off at top of file for vundle compatability)
filetype plugin on
filetype indent on

" Turn on that syntax highlighting
syntax on

" Why is this not a default?
" Make sure that unsaved buffers that are to be put in the background are
" allowed to go in there (ie. the "must save first" error doesn't come up)
set hidden

" Don't update the display while executing macros
set lazyredraw

" At least let yourself know what mode you're in
set showmode

" Enable enhanced command-line completion. Presumes you have compiled
" with +wildmenu.  See :help 'wildmenu'
set wildmenu

" "Better Settings"
" Set the search scan to wrap around the file
set wrapscan

" Set the forward slash to be the slash of note.  Backslashes suck
" This is really only applicable to Windows but I like to have a vimrc
" that works no matter what OS I'm currently on
set shellslash

" Allow backspacing over indent, eol, and the start of an insert
set backspace=2

" Chad's status line (**currently off due to using statusbar plugin**)
"set stl=%f 									" file name
"set stl+=\ %m 									" modified flag
"set stl+=\ %r 									" read only flag
"set stl+=\ line:\ %l/%L 						" cursor line/total lines
"set stl+=[%p%%] 								" percent through entire file (as in Ctrl+G)
"set stl+=\ col:\ %c 							" cursor column
"set stl+=\ buf:\ #%n 							" buffer
"set stl+=%= 									" left/right separator
"set stl+=\ type:\ %y 							" filetype
"set stl+=\ %{strlen(&fenc)?&fenc:'none'} 		"file encoding

" tell VIM to always put a status line in, even if there is only one window
set laststatus=2

" Hide the mouse pointer while typing
set mousehide

" The GUI (i.e. the 'g' in 'gvim') is fantastic, but let's not be
" silly about it :)  The GUI is fantastic, but it's fantastic for
" its fonts and its colors, not for its toolbar and its menus -
" those just steal screen real estate
set guioptions=ac

" time in milliseconds to wait for user input while typing a key command seq
set timeoutlen=500

" Keep some stuff in the history
set history=100

" Fold settings
"" These commands open folds
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
"" set the folding method
set foldmethod=syntax
"" start with folds collapsed
set nofoldenable

" When the page starts to scroll, keep the cursor 8 lines from
" the top and 8 lines from the bottom
set scrolloff=8

" Incrementally match the search.  I orignally hated this
" but someone forced me to live with it for a while and told
" me that I would grow to love it after getting used to it...
" turns out he was right :)
set incsearch

" Syntax coloring lines that are too long just slows down the world
set synmaxcol=2048

" tabstops are 4 spaces and traditional hard tabs unless specified
set tabstop=4
set shiftwidth=4
" tabstops for python are 4 spaces and softtabs used (spaces not hard tabs)
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
" tabstops for many languages 2 spaces and softtabs used (spaces not hard tabs)
autocmd FileType clojure,coffee,css,html,htmldjango,htmljinja,javascript,lisp,ruby,sql,yaml set tabstop=2 shiftwidth=2 expandtab

" remove trailing whitespace for specified filetypes
autocmd FileType clojure,coffee,css,html,htmldjango,htmljinja,javascript,python,ruby,sql,yaml autocmd BufWritePre <buffer> :%s/\s\+$//e

" set the search scan so that it ignores case when the search is all lower
" case but recognizes uppercase if it's specified
set ignorecase
set smartcase

" Show the current command in the lower right corner
set showcmd

" Set up the gui cursor to look nice
set guicursor=n-v-c:block-Cursor-blinkon0
set guicursor+=ve:ver35-Cursor
set guicursor+=o:hor50-Cursor
set guicursor+=i-ci:ver25-Cursor
set guicursor+=r-cr:hor20-Cursor
set guicursor+=sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

" ~ files are evil; set this to not leave any behind
set nobackup
set backupdir=~/tmp

" set an absolute path for swp files so you can commit git/svn changes without closing the files
set dir=~/tmp

" turn on search hilighting
set hls

" turn off mouse support in vim
set mouse-=a

" stop vim from clearing the screen after exit (handy for post edit reference)
set t_ti= t_te=

" set some gui only options (for macvim / gvim)
if has("gui_running")
  set gfn=Menlo:h14
endif

" have vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Show matching brackets.
set showmatch

" Automatically save before commands like :next and :make
set autowrite

" expand shell syntax hilighting to support all bash syntax
let g:is_bash = 1

" suppress scratch preview window
set completeopt-=preview


""""""" "plugin settings"

" solarized theme
"" keep color settings
syntax enable
set background=dark
colorscheme solarized

" vim-airline
"" set airline statusbar options
let g:airline_theme='solarized'
let g:airline_left_sep=''
let g:airline_right_sep=''

" ctrlp
"" do not autocomplete certain dir or file type patterns
set wildignore+=*/venv/*,*/.git/*,*/.svn/*,*/out/*,*/target/*,*/repl/*,*.pyc,.DS_Store,*.zip,*.jar,*.tar,*.gz,*.tar.gz,*.tgz

" ack
"" set search program and flags ack should use
let g:ackprg = 'ag --nogroup --nocolor --column'

" delimitMate
"" disable auto closing parens, brackets, etc for specific filetypes
let delimitMate_excluded_ft = "clojure,lisp"

" junegunn/rainbow_parentheses
"" enable rainbow parens
au VimEnter * RainbowParentheses
"" set paren and bracket types to apply rainbow parens to
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]

" nerdtree
"" have nerdtree always open on the right side
let g:NERDTreeWinPos = "right"
"" close vim if the only buffer open is nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" slimv
let g:slimv_leader = ","
let g:slimv_keybindings = 2
let g:slimv_repl_split = 2 "horz split repl on bottom
let g:slimv_disable_clojure = 1
let g:slimv_disable_lisp = 1
let g:slimv_disable_scheme = 1

" python-mode
"let g:pymode = 0
"let g:pymode_options = 0
let g:pymode_rope_completion = 0
let g:pymode_virtualenv = 0
let g:pymode_breakpoint_bind = '<leader>pb'
let g:pymode_run_bind = '<leader>pr'
let g:pymode_lint_options_pep8 = {
                                \ 'ignore': 'E501',
                                \ 'max_line_length': 160,
                                \ }
let g:pymode_lint = 1

let g:pymode_options_colorcolumn = 0
"highlight ColorColumn ctermbg=8
"highlight ColorColumn guibg=Black
"highlight ColorColumn guibg=Gray

" mustache
"" associate *.ich with mustache filetype
au BufRead,BufNewFile *.ich setfiletype mustache


""""""" "key bindings"

" change the "leader" (vim command key) to ","
let mapleader = ","

" Let's make it easy to edit this file (mnemonic for the key sequence is
" 'e'dit 'v'imrc)
nmap <silent> ,ev :e $MYVIMRC<cr>

" And to source this file as well (mnemonic for the key sequence is
" 's'ource 'v'imrc)
nmap <silent> ,sv :so $MYVIMRC<cr>

" allow jk navigation to not follow line/word wrapping contraints
nnoremap j gj
nnoremap k gk

" ctrlp
"" find file in current directory
nnoremap <leader>t :CtrlP [./] <CR>
"" find buffer in current open buffers list
nnoremap <leader>b :CtrlPBuffer<CR>

" search in within files in current directory
nnoremap <leader>f :Ack<space>

" clear search yet leave search history in tact
nmap <silent> ,/ :nohlsearch<CR>

" jump to line
map ,jl <Plug>(easymotion-bd-jk)

" nerdcommenter
"" toggle/invert comment state of selected line(s)
let NERDCreateDefaultMappings = 0
map ,cl <plug>NERDCommenterInvert

" toggle line numbers
nmap <C-N><C-N> :set invnumber<CR>

" toggle gundo
nnoremap <leader>gu :GundoToggle<CR>

" toggle the nerdtree
nmap <C-n> :NERDTreeToggle<CR>

" GRB: use fancy buffer closing that doesn't close the split
cnoremap <expr> bd (getcmdtype() == ':' ? 'Bclose' : 'bd')

" toggle paste mode
set pastetoggle=<leader>p

" toggle tagbar
nmap <leader>rt :TagbarToggle<CR>

"zoomwin keybinds (toggles focusing in on a split; sort of a split/unsplit)
nnoremap <leader>zw :ZoomWin<CR>

" resize splits
nnoremap <leader><UP> :resize +5<CR>
nnoremap <leader><DOWN> :resize -5<CR>
nnoremap <leader><LEFT> :vertical resize +5<CR>
nnoremap <leader><RIGHT> :vertical resize -5<CR>

"" toggle folds
nmap <space> za

" change to the current file's directory and then print the working directory
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>
" change to home src directory and then print the working directory
nnoremap ,cds :cd ~/src<CR>:pwd<CR>

" preview the current file in marked
nnoremap <leader>m :silent !open -a Marked\ 2.app '%:p'<cr>

" dash app support
nmap <silent> <leader>d <Plug>DashSearch
